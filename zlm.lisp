;;;; zlm.lisp

(in-package #:zlm)

(defparameter *pc* 0 "Z-machine program counter")

;; 6.3.3
;; The absolute minimum standard for stack size is defined as:
;;   let the 'usage' of a routine call be 4 plus the number of local
;;   variables it has. During a game the total of the usages for each
;;   routine in the recursive chain of routines being called, plus the
;;   game's own stack usage, can be assumed to never reach 1024.

;; However, more recent games have required a much larger stack size
;; than this allows for. It is advised that interpreters allow for
;; these games by having a larger stack size if at all possible.

;; Two examples of modern interpreters with increased stack size are
;; Windows Frotz, with 32768, and nfrotz with 61440.

;; The obvious implementation is a list
(defparameter *stack* nil "Z-machine stack")

;; 1.1
;; The memory map of the Z-machine is an array of bytes with "byte
;; addresses" running from 0 upwards. This is divided into three
;; regions: "dynamic", "static" and "high".
(defparameter *memory* (make-array (* 512 1024) :initial-element 0) "Z-machine memory")
(defparameter *story-file-size* 0)

(defun load-file (filename)
  "Load a version 3 file into memory"
  (with-open-file (file filename :direction :input :element-type '(unsigned-byte 8))
    (loop :for i :from 0 :doing
       (let ((c (read-byte file nil nil)))
         (when (null c)
           (setf *story-file-size* i)
           (return-from load-file))
         (setf (elt *memory* i) c)))))

(defun load-v3-file (filename)
  "Load a version 3 file into memory"
  (load-file filename))

;; Dynamic memory begins from byte address $00000 and runs up to the
;; byte before the byte address stored in the word at $0e in the
;; header. (Dynamic memory must contain at least 64 bytes.)

;; Static memory follows immediately on. Its extent is not defined in
;; the header (or anywhere else), though it must end by the last byte
;; of the story file or by byte address $0ffff (whichever is
;; lower).

;; High memory begins at the "high memory mark" (the byte address
;; stored in the word at $04 in the header) and continues to the end
;; of the story file. The bottom of high memory may overlap with the
;; top of static memory (but not with dynamic memory) .
(defun byte-at (position)
  (elt *memory* position))

(defun word-at (position)
  (+ (* 256 (elt *memory* position))
     (elt *memory* (1+ position))))

(defun header (field)
  (case field
    ((version) (byte-at #x00))
    ((flags-1) (byte-at #x01))
    ((high-memory-base) (word-at #x04))
    ((high-memory-top) *story-file-size*)
    ((initial-pc) (word-at #x06))
    ((dictionary-base) (word-at #x08))
    ((object-table-base) (word-at #x0a))
    ((global-variables-base) (word-at #x0c))
    ((dynamic-memory-base) 0)
    ((dynamic-memory-top) (word-at #x0e))
    ((static-memory-base) (word-at #x0e))
    ((static-memory-top) (min *story-file-size* #xffff))
    ((flags-2) (byte-at #x10))
    ((abbreviations-base) (word-at #x18))
    ((length-of-file) (word-at #x1a))
    ((checksum) (word-at #x1c))
    ((standard-revision) (word-at #x32))))

(defun write-to-header ())

(defun run (filename)
  (load-file filename)
  (setf *pc* (header 'initial-pc)))

(defun push-frame (pc vars routine-stack)
  (push (list pc vars routine-stack) *stack*))

(defun opcode (n)
  (format t "Opcode ~A~%" n))

(defun fetch-instruction (position)
  (let ((opcode))
    
    ))

(defun operate ()
  ;; If an interrupt has been generated by an outside event (i.e., a
  ;; sound effect has finished), that routine is called as an
  ;; interrupt without passing it any values, and ignoring the
  ;; returned value.  This step is then executed again.

  ;; The Z-code instruction beginning at the PC address is read.
  ;; (This excludes the so-called string, result, and branch
  ;; arguments.)  Note that it is legal for a Z-code instruction to
  ;; appear in RAM; this makes self-modifying code possible.
  (let ((instruction 'something))

    ;; The PC is set to the address after the instruction.
    (setf *pc* 'whatever)
    
    ;; The instruction is carried out, possibly resulting in changes to
    ;; the PC, or any other writable locations.
    (opcode instruction)
    
    ))
